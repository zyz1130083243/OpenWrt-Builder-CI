name: OpenWrt Builder

on:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/openwrt/openwrt.git
  REPO_BRANCH: v23.05.4
  WORKS_DIR: /workspace
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # - name: Init env
      #   run: |
      #     sudo apt-get -qq update
      #     sudo apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
      #     sudo timedatectl set-timezone "$TZ"
      #     sudo mkdir -p $WORKS_DIR
      #     sudo chown $USER:$GROUPS $WORKS_DIR
      #     echo 'Disk Information:'
      #     df -hT $WORKS_DIR
      #     echo 'Memory Information:'
      #     free
          
      - name: Clone source code
        run: |
          ls -l
          chmod -x *
          git clone $REPO_URL -b $REPO_BRANCH $WORKS_DIR/openwrt
          cp * $REPO_BRANCH $WORKS_DIR/openwrt
          tree $WORKS_DIR/openwrt
      #      && mv feeds.config $WORKS_DIR/openwrt/feeds.config
      #     [ -e .config ] && mv .config $WORKS_DIR/openwrt/.config
      #     [ -e pre_compilation_operations.sh ] && mv pre_compilation_operations.sh $WORKS_DIR/openwrt/pre_compilation_operations.sh
      #      ln -sf openwrt $GITHUB_WORKSPACE/openwrt
          
      # - name: Update feeds
      #   run: |
          
      #     cd openwrt
      #     chmod -x feeds.config && feeds.config
      #     ./scripts/feeds update -a

      # - name: Install feeds
      #   run: cd openwrt && ./scripts/feeds install -a

      # - name: Load config
      #   run: |
         
          
      #     cd openwrt && make defconfig

      # - name: Download package
      #   if: ${{ success() }}
      #   id: package
      #   run: |
      #     cd openwrt
      #     make download -j8
      #     find dl -size -1024c -exec ls -l {} \;
      #     find dl -size -1024c -exec rm -f {} \;

      # - name: compile
      #   if: ${{ success() }}
      #   id: compile
      #   run: |
      #     cd openwrt
      #     make -j$(nproc) || make -j1 || make -j1 V=s

      # - name: Pre Upload
      #   run: | 
      #     cd openwrt
      #     grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
      #     [ -s DEVICE_NAME ] && echo "DEVICE_NAME=$(cat DEVICE_NAME)" >> $GITHUB_ENV
      #     echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
      #     cd bin/targets/*/*
      #     rm -rf packages
      #     echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV

      # - name: Upload bin directory
      #   uses: actions/upload-artifact@v4
      #   if: ${{ success() }}
      #   with:
      #     name: OpenWrt_bin_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
      #     path: openwrt/bin

      # - name: Upload firmware directory
      #   if: ${{ success() }}
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: OpenWrt_firmware_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
      #     path: ${{ env.FIRMWARE_PATH }}

      # - name: Generate release tag
      #   id: tag
      #   run: |
      #     echo "release_tag_name=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
      #     touch release.txt
      #     [ ${UPLOAD_GOFILE} = true && ${{ steps.gofile.outputs.url }} ] && echo "ðŸ”— [GoFile](${{ steps.gofile.outputs.url }})" >> release.txt

      # - name: Upload firmware to release
      #   if: ${{ success() }}
      #   uses: softprops/action-gh-release@master
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.OPENWRT_AUTOBUILE_TOKEN }}
      #   with:
      #     tag_name: ${{ steps.tag.outputs.release_tag_name }}
      #     body_path: release.txt
      #     files: ${{ env.FIRMWARE_PATH }}/*
